parameter ItemType

let Nil = type layout

let Cons = type layout
    * head
    * tail
end

let LinkedLayoutType = type layout
    * Nil
    * Cons
end

let linked_layout = LinkedLayoutType {    
    Nil = Nil,
    Cons = Cons,
}

let LinkedType = type linked_layout
LinkedType.>Item = ItemType

impl Debug[LinkedType]
    format = function (linked)
        match linked
            is Nil "nil"
            is Cons begin
                let s = Debug[LinkedType.>Item].format(linked.head)
                String.>append(s, " : ")
                String.>append(s, Debug[LinkedType].format(linked.tail))
                s
            end
        end
end

LinkedType.>length = function (linked)
    match linked
        is Nil 0
        is Cons 1 + length(linked.tail)
    end

LinkedType.>append = function (linked1, linked2)
    set linked1 = match linked1
        is Nil linked2
        is Cons begin
            LinkedType.>append(linked1.tail, linked2)
            linked1
        end
    end

LinkedType