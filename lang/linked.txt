let LinkedLayoutType = type layout
    * Nil
    * Cons
end
let Nil = type layout
let Cons = type layout
    * head
    * tail
end
let LinkedLayout = LinkedLayoutType
    Nil = Nil
    Cons = Cons
end

let length
let append
let debug_format

let Linked = function (ItemType)
    let LinkedType = type LinkedLayout
    LinkedType.>Item = ItemType

    impl Debug[LinkedType]
        format = debug_format(LinkedType)
    end

    LinkedType.>length = length
    LinkedType.>append = append
    LinkedType
end

set debug_format = function (LinkedType) function (linked)
    match linked
        variant Nil "Nil"
        variant Cons begin
            let s = Debug[LinkedType.>Item].format(linked.head)
            String.>append(s, " : ")
            String.>append(s, Debug[LinkedType].format(linked.tail))
            s
        end
    end

set length = function (linked)
    match linked
        variant Nil 0
        variant Cons 1 + length(linked.tail)
    end

set append = function (linked1, linked2)
    set linked1 = match linked1
        variant Nil linked2
        variant Cons begin
            append(linked1.tail, linked2)
            linked1
        end
    end

let LinkedInt = Linked(Int)

let xs = Cons {
    head = 42,
    tail = Nil,
}
trace(Debug[LinkedInt].format(xs))

(function (Type) function (xs, ys)
    let s = "length = "
    String.>append(s, Display[Int].format(Type.>length(xs)))
    trace(s)

    Type.>append(xs, ys)
    trace(Debug[Type].format(xs))
end)(LinkedInt)(Cons { head = 43, tail = Nil })