let length
let append
let debug_format

let Linked = function (Type)
    let LinkedType = type Item = Type end

    Debug[LinkedType].format = debug_format(LinkedType)

    LinkedType.length = length
    LinkedType.append = append
    LinkedType
end

let debug_format = function (LinkedType) function (linked)
    match linked
        variant Nil "Nil"
        variant Cons begin
            let s = Debug[LinkedType.Item].format(linked.head)
            String.append(s, " : ")
            String.append(s, Debug[LinkedType].format(linked.tail))
            s
        end
    end

let length = function (linked)
    match linked
        variant Nil 0
        variant Cons 1 + length(linked.tail)
    end

let append = function (linked1, linked2)
    set linked1 = match linked1
        variant Nil linked2
        ; a little bit confusing here to match `Cons` then immediately construct `Cons`
        variant Cons begin
            append(linked1.tail, linked2)
            linked1
        end
    end

let LinkedInt = Linked(Int)

let xs = enum Cons struct
    head = 42
    tail = enum Nil
end

trace(xs)

let s = "length = "
String.append(s, Display[Int].format(length(xs)))
trace(s)

let ys = enum Cons struct
    head = 42
    tail = enum Nil
end
append(xs, ys)
trace(xs)