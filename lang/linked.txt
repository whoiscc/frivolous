parameter ItemType

let Nil be type layout

let Cons be type layout
    * head
    * tail
end

let LinkedLayoutType be type layout
    * Nil
    * Cons
end

let linked_layout be LinkedLayoutType { Nil Nil, Cons Cons }

let LinkedType be type linked_layout
set LinkedType.>Item ItemType

impl Debug[LinkedType]
    format function (linked) match linked
        is Nil "nil"
        is Cons then
            let s Debug[LinkedType.>Item].format(linked.head)
            String.>append(s, " : ")
            String.>append(s, Debug[LinkedType].format(linked.tail))
            s
        end
    end
end

set LinkedType.>length function (linked) match linked
    is Nil 0
    is Cons 1 + length(linked.tail)
end

set LinkedType.>append function (linked1, linked2)
    set linked1 = match linked1
        is Nil linked2
        is Cons then
            LinkedType.>append(linked1.tail, linked2)
            linked1
        end
    end

LinkedType